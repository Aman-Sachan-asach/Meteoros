// Ray March Reference: https://www.shadertoy.com/view/4sjfzw

#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE) in;

//TODO: Ping-pong storage Images:
//record 2 command buffers and then in the drawFrame function called onUpdate in the main function execute one and then the other;
//Note this requires 3 different descriptor sets; one in which things that dont ping pong and the other 2 have the 2 storage images to be ping-ponged are stored but in different orders;
//maybe just do it in 2 descriptor sets cause technically they just store pointers and so it shouldnt be terrible in memory

layout (set = 0, binding = 0, rgba32f) uniform writeonly image2D currentFrameResultImage;
layout (set = 0, binding = 1, rgba32f) uniform image2D previousFrameResultImage;
layout (set = 0, binding = 2) uniform sampler3D cloudBaseShapeSampler;
layout (set = 0, binding = 3) uniform sampler3D cloudDetailsHighFreqSampler; // Dont use alpha channel
layout (set = 0, binding = 4) uniform sampler2D curlNoiseSampler; // Don't use alpha channel
layout (set = 0, binding = 5) uniform sampler2D weatherMapSampler; // Don't use alpha channel
layout (set = 0, binding = 6, rgba32f) uniform image2D godRaysCreationDataImage;

layout (set = 1, binding = 0) uniform CameraUBO
{
	mat4 view;
	mat4 proj;
	vec4 eye;
	vec2 tanFovBy2;
} camera;

layout (set = 2, binding = 0) uniform TimeUBO
{
    vec2 time; //stores delat time and total time
};

layout (set = 3, binding = 0) uniform SunAndSkyUBO
{
    vec4 sunLocation;
	vec4 sunDirection;
	vec4 lightColor;
	float sunIntensity;
};

layout (set = 4, binding = 0) uniform KeyPressQueryUBO
{
    int key_debug;
} keyPressQuery;

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Intersection {
    vec3 normal;
    vec3 point;
    bool valid;
    float t;
};

//Global Defines for Debug Views
#define LIGHTING 0
#define BACKGROUND_SKY 0

#define CLOUD_DENSITY 0

#define TEXTURE_CURL_NOISE 0
#define TEXTURE_HIGH_FREQ 0
#define TEXTURE_LOW_FREQ 0
#define HEIGHT_GRADIENT 0

//Global Defines for math constants
#define PI 3.14159265
#define THREE_OVER_SIXTEEN_PI 0.05968310365946075
#define ONE_OVER_FOUR_PI 0.07957747154594767
#define E 2.718281828459

//Global Defines for Colors
#define BLACK vec3(0,0,0)
#define WHITE vec3(1,1,1)
#define RED vec3(1,0,0)

//Global Defines for Earth and Cloud Layers 
#define EARTH_RADIUS 6371000.0 // earth's actual radius in km = 6371
#define ATMOSPHERE_RADIUS_INNER (EARTH_RADIUS + 7500.0) //paper suggests values of 15000-35000m above
#define ATMOSPHERE_RADIUS_OUTER (EARTH_RADIUS + 20000.0)
#define ATMOSPHERE_THICKNESS (ATMOSPHERE_RADIUS_OUTER - ATMOSPHERE_RADIUS_INNER)

#define IN_STRATUS_MIN_MAX vec2(0.0, 0.3)
#define IN_CUMULUS_MIN_MAX vec2(0.01, 0.45)
#define IN_CUMULONIMBUS_MIN_MAX vec2(0.0, 0.95)

// Global Defines for Preetham 
#define EE 1000.0
#define SHADOW_CUTOFF 1.6110731557
#define SHADOW_STEEPNESS 1.5
#define SUN_ANGULAR_COS 0.999956676946448443553574619906976478926848692873900859324
#define MIE_CONST vec3( 1.839991851443397, 2.779802391966052, 4.079047954386109)
#define RAYLEIGH_TOTAL vec3(5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5)

// Global Wind Defines
#define WIND_DIRECTION vec3(1.0,0.0,0.0)
#define CLOUD_SPEED 0.05
#define CLOUD_TOP_OFFSET 5.0// this offset pushes the tops of the clouds along this wind direction by this many units

// #define LightVec normalize(vec3(1.0,1.0,1.0));
#define SUN_LOCATION vec3(0.0, ATMOSPHERE_RADIUS_OUTER + EARTH_RADIUS / 2.0, -EARTH_RADIUS * 1.5) //TODO:change it through uniform for an animated sky
#define BACKGROUND_SKY_SUN_LOCATION vec3(0.0, EARTH_RADIUS, -EARTH_RADIUS * 10.0)
#define SUN_COLOR vec3(1.0, 1.0, 1.0)
#define SUN_INTENSITY 5.0

//--------------------------------------------------------
//					TOOL BOX FUNCTIONS
//--------------------------------------------------------

// Maps values from one range to another
float remap(in float value, in float original_min, in float original_max, in float new_min, in float new_max)
{
	return new_min + ( ((value - original_min) / (original_max - original_min)) * (new_max - new_min) );
}

float getRelativeHeightInAtmosphere(in vec3 point, in vec3 earthCenter, in vec3 startPosOnInnerShell, in vec3 rayDir, in vec3 eye)
{
	float lengthOfRayfromCamera = length(point - eye);
	float lengthOfRayToInnerShell = length(startPosOnInnerShell - eye);
	vec3 pointToEarthDir = normalize(point - earthCenter);
	//assuming RayDir is normalised
	float cosTheta = dot(rayDir, pointToEarthDir);

	// //factor to affect ray height projection the more alligned with the horizon it is
	// //Could do actual math but it seems expensive with all of its trig so instead try binning and approximations
	// float horizonScaleFactor = cosTheta;

	// //remove the thing below if you want clouds to fade out as the ray dir goes below the horizon
	// // if( horizonScaleFactor < 0.06 )
	// // {
	// // 	horizonScaleFactor = 0.06;
	// // }

	float numerator = abs(cosTheta * (lengthOfRayfromCamera - lengthOfRayToInnerShell));
	return numerator/ATMOSPHERE_THICKNESS;
	// return clamp( length(point.y - projectedPos.y) / ATMOSPHERE_THICKNESS, 0.0, 1.0);
}

vec3 getRelativePositionInAtmosphere(in vec3 pos, in vec3 earthCenter)
{
   	return vec3( ( pos - vec3(earthCenter.x, ATMOSPHERE_RADIUS_INNER - EARTH_RADIUS, earthCenter.z) )/ ATMOSPHERE_THICKNESS );
}

//Compute Ray for ray marching based on NDC point
Ray castRay( vec2 screenPoint, vec3 eye )
{
	Ray r;

    // Extract camera information from uniform
	vec3 camRight = normalize(vec3( camera.view[0][0], 
				    				camera.view[1][0], 
				    				camera.view[2][0] ));
	vec3 camUp =    normalize(vec3( camera.view[0][1], 
				    				camera.view[1][1], 
				    				camera.view[2][1] ));
	vec3 camLook =  -normalize(vec3(camera.view[0][2], 
				    				camera.view[1][2], 
				    				camera.view[2][2] ));

	// Compute ndc space point from screenspace point //[-1,1] to [0,1] range
    vec2 NDC_Space_Point = screenPoint * 2.0 - 1.0; 

    //convert to camera space
    vec3 cam_x = NDC_Space_Point.x * camera.tanFovBy2.x * camRight;
    vec3 cam_y = NDC_Space_Point.y * camera.tanFovBy2.y * camUp;
    //convert to world space
    vec3 ref = eye+camLook;
    vec3 p = ref + cam_x + cam_y; //facing the screen

    r.origin = eye;
    r.direction = normalize(p - eye);

    return r;
}

//Sphere Intersection Testing
Intersection raySphereIntersection(in vec3 rO, in vec3 rD, in vec3 sphereCenter, in float sphereRadius)
{
    Intersection isect;
    isect.valid = false;
    isect.point = vec3(0.0);
    isect.normal = vec3(0.0, 1.0, 0.0);

    // Transform Ray such that the spheres move down, such that the camera is close to the sky dome
    // Only change sphere origin because you can't translate a direction
    rO -= sphereCenter;
    rO /= sphereRadius;

    float A = dot(rD, rD);
    float B = 2.0*dot(rD, rO);
    float C = dot(rO, rO) - 1.0; //uniform sphere
    float discriminant = B*B - 4.0*A*C;

    //If the discriminant is negative, then there is no real root
    if(discriminant < 0.0)
    {
        return isect;
    }

    float t = (-B - sqrt(discriminant))/(2.0*A);
    
    if(t < 0.0) 
    {
        t = (-B + sqrt(discriminant))/(2.0*A);
    }

    if(t >= 0.0)
    {
        vec3 p = vec3(rO + t*rD);
        isect.valid = true;
        isect.normal = normalize(p);

        p *= sphereRadius;
        p += sphereCenter;

        isect.point = p;
        isect.t = length(p-rO);
    }

    return isect;
}

//--------------------------------------------------------
//						LIGHTING
//--------------------------------------------------------

/*
    Note:
        - Apply this result whenever you calculate radiance of your sample 

    Functionality:
        - Combine 2 HG functions with max() to retain baseline forward scattering and achieve silver lining highlights
    
        eccentricity = 0.6
    
        silver_intensity = user controlled param [0, 1]
                            Controls intensity of the effect of using 2 HG functions and the spread away from the sun
                            Increase this to add intensity on clouds near the sun 

        silver_spread = user contorlled param [0, 1]
                            Decrease this to increase brightness that's spread throughout clouds away from the sun
*/
float HenyeyGreenstein(float cos_angle, float eccentricity)
{
	float numerator =  1.0 - eccentricity * eccentricity;
	float denominator = pow((1.0 + eccentricity * eccentricity - 2.0 * eccentricity * cos_angle), 1.5);
    return (numerator / denominator) * ONE_OVER_FOUR_PI;
}

float HGModified(float cos_angle, float eccentricity, float silver_intensity, float silver_spread)
{
    return max( HenyeyGreenstein(cos_angle, eccentricity),  
                silver_intensity * HenyeyGreenstein(cos_angle, 0.99 - silver_spread) );
}

/*
    Note: 
        - Only do this when you look away from sun
        - Ramp down this affect as angle b/w viewRay and lightRay decrease
        - attenuation_reduction_factor = 0.25;
    	- influence_reduction_factor = 0.7;

    Functionality: 
        - Attenuation value for the second function was reduced to push light further into the cloud
        - Reduce its influence so to not overpower the result. 
        - density_along_light_ray comes from cone sampling 
*/
float BeerLambertModified(float density_along_light_ray, float attenuation_reduction_factor, float influence_reduction_factor)
{
    return max( exp(density_along_light_ray) , 
    			exp(density_along_light_ray * attenuation_reduction_factor) * influence_reduction_factor );
}

/*
	Notes:
		- dl is the density sampled along the light ray for the given sample position.
		- ds_loded is the low lod sample of density at the given sample position.

*/

float GetLightEnergy(float height_fraction, float dl, float ds_loded, float phase_probability, float cos_angle, float step_size, float brightness)
{
    // Attenuation – difference from slides – reduce the secondary component when we look toward the sun.
    // float primary_attenuation = exp(dl);
    // float secondary_attenuation = exp(dl * 0.25) * 0.7;

    // // NOTE: in the slides, seconary_attenuation was "secondary_intensity_curve", and primary_attenuation was "primary_intensity_curve". UNSURE IF SAME
    // // FIRST INSTANCE
    // float attenuation_probability = max( 
    // 									remap(cos_angle, 0.7, 1.0, secondary_attenuation, secondary_attenuation * 0.25), 
    // 									primary_attenuation);
    // // --------------------------------------------------------------------------------------------------------------------
    // // SECOND INSTANCE
    // float beerLambertModified = BeerLambertModified(dl, 0.25, 0.7);
    // // float attenuation_probability = mix(primary_attenuation, beerLambertModified, -cos_angle * 0.5 + 0.5);
    

    // // In-scattering – one difference from presentation slides – we also reduce this effect once light has attenuated to make it directional.

    // // FIRST INSTANCE
    // float depth_probability = mix( 0.05 + pow( ds_loded, remap( height_fraction, 0.3, 0.85, 0.5, 2.0 )), 1.0, clamp( dl / step_size, 0.0, 1.0));
    
    // // --------------------------------------------------------------------------------------------------------------------
    // // SECOND INSTANCE
    // // float depth_probability = mix(0.05 + pow(ds_loded, clamp(
    // // 														remap(height_fraction, 0.3, 0.85, 0.5, 2.0), 
    // // 														0.6, 2.0)), 
    // // 							1.0, 
    // // 							clamp(dl / step_size, 0.0, 1.0));




    // float vertical_probability = pow(clamp(
    // 										remap(height_fraction, 0.07, 0.14, 0.1, 1.0 ), 
    // 										0.1, 1.0), 
    // 								0.8 );
    
    // float in_scatter_probability = depth_probability * vertical_probability;

    // float light_energy = attenuation_probability * in_scatter_probability * phase_probability * brightness;

    // return light_energy;
    return 1.0f;
}

//--------------------------------------------------------
//					PREETHAM SKY MODEL
//--------------------------------------------------------
/*
	Preetham Sky from: 
	https://github.com/markstock/GenUtahSky/blob/master/utah.cal

	A1			- Turbidity
    A2,A3,A4	- sun direction
	
	Other resources for preetham sky model: 
	Preetham Sky From Project Marshmallow - Dan McCann and Joe Klinger
	Adapted from open source of zz85 on Github, math from Preetham Model, initially implemented by Simon Wallner and Martin Upitis
*/

float rayleighPhase(float cosTheta) 
{
    return THREE_OVER_SIXTEEN_PI * (1.0 + cosTheta * cosTheta);
}

vec3 calcSkyBetaR() 
{
	float rayleigh = 2.0;
  	float sunFade = 1.0 - clamp(1.0 - exp(BACKGROUND_SKY_SUN_LOCATION.y / 450000.0), 0.0, 1.0);
	return vec3(RAYLEIGH_TOTAL * (rayleigh - 1.0 + sunFade)); 
}

vec3 calcSkyBetaV() 
{
	float turbidity = 10.0;
	float mie = 0.005;
    float c = (0.2 * turbidity) * 10E-18;
    return vec3(0.434 * c * MIE_CONST * mie);
}

float calcSunIntensity() 
{
	float zenithAngleCos = clamp(normalize(BACKGROUND_SKY_SUN_LOCATION).y, -1.0, 1.0);
	return EE * max(0.0, 1.0 - pow(E, -((SHADOW_CUTOFF - acos(zenithAngleCos)) / SHADOW_STEEPNESS)));
}

vec3 getAtmosphereColorPhysical(vec3 dir, vec3 sunDir) 
{
    vec3 color = vec3(0);

    sunDir = normalize(sunDir); 
    float sunE = SUN_INTENSITY * calcSunIntensity(); 
    vec3 BetaR = calcSkyBetaR();   
    vec3 BetaM = calcSkyBetaV(); 

    // optical length
    float zenith = acos(max(0.0, dir.y)); // acos?
    float inverse = 1.0 / (cos(zenith) + 0.15 * pow(93.885 - ((zenith * 180.0) / PI), -1.253));
    float sR = 8.4E3 * inverse;
    float sM = 1.25E3 * inverse;

    vec3 fex = exp( -BetaR * sR + BetaM * sM);

    float cosTheta = dot(sunDir, dir);

    float rPhase = rayleighPhase(cosTheta * 0.5 + 0.5);
    vec3 betaRTheta = BetaR * rPhase;
    float mie_directional = 0.8;
    float mPhase = HenyeyGreenstein(cosTheta, mie_directional);
    vec3 betaMTheta = BetaM * mPhase;

    float yDot = 1.0 - sunDir.y;
    yDot *= yDot * yDot * yDot * yDot;
    vec3 betas = (betaRTheta + betaMTheta) / (BetaR + BetaM);
    vec3 Lin = pow(sunE * (betas) * (1.0 - fex), vec3(1.5));
    Lin *= mix(vec3(1), pow(sunE * (betas) * fex, vec3(0.5)), clamp(yDot, 0.0, 1.0));

    vec3 L0 = 0.1 * fex;

    float sunDisk = smoothstep(SUN_ANGULAR_COS, SUN_ANGULAR_COS + 0.00002, cosTheta);
    L0 += (sunE * 15000.0 * fex) * sunDisk;

    color = (Lin + L0) * 0.04 + vec3(0.0, 0.0003, 0.00075);

    // return color in HDR space
    return color;
}

// End credit to Preetham Sun Sky model

//--------------------------------------------------------
//					CLOUD SAMPLING
//--------------------------------------------------------

float getDensityHeightGradientForPoint(vec3 point, in float relativeHeight, in vec3 earthCenter, float cloudType)
{
    relativeHeight = clamp(relativeHeight, 0.0, 1.0);

    float cumulus = max(0.0, remap(relativeHeight, 0.01, 0.3, 0.0, 1.0) * remap(relativeHeight, 0.6, 0.95, 1.0, 0.0));
    float stratocumulus = max(0.0, remap(relativeHeight, 0.0, 0.25, 0.0, 1.0) * remap(relativeHeight,  0.3, 0.65, 1.0, 0.0)); 
    float stratus = max(0.0, remap(relativeHeight, 0, 0.1, 0.0, 1.0) * remap(relativeHeight, 0.2, 0.3, 1.0, 0.0)); 

    float a = mix(stratus, stratocumulus, max(clamp(cloudType * 2.0, 0.0, 1.0), 0.65));
    float b = mix(stratocumulus, stratus, clamp((cloudType - 0.5) * 2.0, 0.0, 1.0));
    return mix(a, b, cloudType);
}

vec3 skewSamplePointWithWind(in vec3 point, inout float height_fraction)
{
    //skew in wind direction
    point += height_fraction*WIND_DIRECTION*CLOUD_TOP_OFFSET*0.009;
    //Animate clouds in wind direction and add a small upward bias to the wind direction
    point += (WIND_DIRECTION + vec3(0.0,0.1,0.0))*CLOUD_SPEED*time.y;
    return point;
}

float sampleLowFrequency(vec3 point, in float relativeHeight, in vec3 earthCenter)
{
    //Read in the low-frequency Perlin-Worley noises and Worley noises
    vec4 lowFrequencyNoises = texture(cloudBaseShapeSampler, point);

    //Build an FBM out of the low-frequency Worley Noises that are used to add detail to the Low-frequency Perlin Worley noise
    float lowFrequencyFBM = (lowFrequencyNoises.g * 0.625) + 
                            (lowFrequencyNoises.b * 0.25)  + 
                            (lowFrequencyNoises.a * 0.125);
    lowFrequencyFBM = clamp(abs(lowFrequencyFBM), 0.0, 1.0);                      

    // Define the base cloud shape by dilating it with the low-frequency FBM
    float baseCloud = remap( lowFrequencyNoises.r, -(1.0 - lowFrequencyFBM), 1.0, 0.0, 1.0 );
    
    // ------------------ only screws it up; but needed for blending cloud types -----------------------
    //Get the density-height gradient
    vec2 weatherSamplePoint = point.xz/100.0f;
    vec3 weather_data = texture(weatherMapSampler, weatherSamplePoint).rgb;
    float cloudType = weather_data.g;
    float densityHeightGradient = getDensityHeightGradientForPoint(point, relativeHeight, earthCenter, weather_data.g);

    //Apply Height function to the base cloud shape
    // baseCloud *= densityHeightGradient*0.8;
    // -------------------------------------------------------------------------------------------------

    // Cloud coverage is stored in weather data’s red channel .
    //WHAT EVEN???? --> increasing cloud coverage apparently reduces base_cloud_with_coverage
    float cloud_coverage = 0.6;// weather_data.r;

    // Use remap to apply the cloud coverage attribute.
    float base_cloud_with_coverage = remap ( baseCloud, cloud_coverage , 1.0 , 0.0 , 1.0);

    // To ensure that the density increases with coverage in an aesthetically pleasing manner
    // Multiply the result by the cloud coverage attribute so that smaller clouds are lighter 
    // and more aesthetically pleasing
    base_cloud_with_coverage *= cloud_coverage;

    return base_cloud_with_coverage;//base_cloud_with_coverage;
}

float erodeCloudWithHighFrequency(in float baseCloud, in vec3 rayDir, in vec3 point, in float height_fraction)
{
    // Add turbulence to the bottom of the clouds
    vec4 curlNoise = texture(curlNoiseSampler, point.xy);
    point.xy += curlNoise.xy * (1.0-height_fraction) * 0.5;

    // Sample High Frequency Noises
    vec4 highFrequencyNoise = texture(cloudDetailsHighFreqSampler, point);

    float removeCloudsFactor = 1.0;
    if(rayDir.y < 0.035)
    {
    	float factor = remap(rayDir.y, 0.0, 0.035, 1.0, 0.0);
    	removeCloudsFactor = factor * 20.0;
    }

    // Build High Frequency FBM
    float high_freq_FBM = (highFrequencyNoise.r * 0.625) + 
                          (highFrequencyNoise.g * 0.25)  +
                          (highFrequencyNoise.b * 0.125); 
	high_freq_FBM = clamp(abs(high_freq_FBM), 0.0, 1.0);

	//Erode the base shape of the cloud with the distorted high frequency worley noises
	float subtractionNoise = abs((highFrequencyNoise.r - high_freq_FBM)*0.1);
	float final_cloud = max( 0.0, baseCloud - subtractionNoise*removeCloudsFactor*0.1);
	return final_cloud;
}

vec3 rayMarch(Ray ray, vec3 earthCenter, in vec3 startPos, in float start_t, in float end_t, inout float accumDensity, inout float transmittance)
{
	//TODO the above causes faint circular lines snooth it out
	float _dot = dot(abs(ray.direction), vec3(0.0,1.0,0.0));
	float maxSteps = floor(mix(52.0, 84.0, 1.0-_dot));
	float stepSize = (end_t - start_t) / maxSteps;

	vec3 camForward =  -normalize(vec3( camera.view[0][2], camera.view[1][2], camera.view[2][2] ));

    vec3 pos;
    vec3 samplePoint;

    // Lighting data -------------------------------------------------------------------
	    // Henyey-Greenstein
	    vec3 lightDir = normalize(SUN_LOCATION-ray.origin);
	    float cos_angle = dot(normalize(ray.direction), lightDir);
	    float eccentricity = 0.6;//0.6;
	    float silver_intensity = 0.7;
	    float silver_spread = 0.1;
	    float HG_light = HGModified(cos_angle, eccentricity, silver_intensity, silver_spread);

	    // Random unit vectors for your cone sample.
	    // These are positioned to be facing the sun 
	    // Create random samples within a unit cone facing world up (y direction)
	    // Construct TBN matrix towards light
	    // Then rotate unit cone towards the sun using TBN

	    vec3 maxCompUnitVector;
	    if(abs(lightDir[0]) > abs(lightDir[1]) && abs(lightDir[0]) > abs(lightDir[2]))
	    {
	        maxCompUnitVector = vec3(abs(lightDir[0]), 0.0, 0.0);
	    }
	    else if(abs(lightDir[1]) > abs(lightDir[0]) && abs(lightDir[1]) > abs(lightDir[2]))
	    {
	        maxCompUnitVector = vec3(0.0, abs(lightDir[1]), 0.0);
	    }
	    else
	    {
	        maxCompUnitVector = vec3(0.0, 0.0, abs(lightDir[2]));
	    }
	    
	    vec3 zComponent = cross(lightDir, maxCompUnitVector);
	    vec3 xComponent = cross(zComponent, lightDir);
	    mat3 sunRotMatrix = mat3(xComponent, lightDir, zComponent);

	    vec3 noise_kernel[] = 
	    {
	        sunRotMatrix * vec3(0.1, 0.25, -0.15),
	        sunRotMatrix * vec3(0.2, 0.5, 0.2),
	        sunRotMatrix * vec3(-0.2, 0.1, -0.1),
	        sunRotMatrix * vec3(-0.05, 0.75, 0.05),
	        sunRotMatrix * vec3(-0.1, 1.0, 0.0),
	        sunRotMatrix * vec3(0.0, 3.0, 0.0),     // One sample should be at distance 3x cone length
	    };
    // Lighting data -------------------------------------------------------------------
    // int count = 0;
    vec3 returnColor = vec3(0.0);
    float relativeHeight;
    float baseDensity;

	for (float t = start_t; t < end_t; t += stepSize)
	{
		// if(count>80)
		// {
		// 	break;
		// }
		// count++;
		vec3 colorPerSample = vec3(0.0);

		pos = ray.origin + t * ray.direction;

        samplePoint = getRelativePositionInAtmosphere(pos, earthCenter);
        samplePoint /= 8.0f; //controls the frequency of how we are sampling the noise texture

		relativeHeight = getRelativeHeightInAtmosphere(pos, earthCenter, startPos, ray.direction, ray.origin);
        vec3 skewedSamplePoint = skewSamplePointWithWind(samplePoint, relativeHeight);
		baseDensity = sampleLowFrequency(skewedSamplePoint, relativeHeight, earthCenter)*0.1; //helps for early termination of rays

		if(baseDensity > 0.0) // Useful to prevent lighting calculations for zero density points
		{
            //Erode Base cloud shape with higher frequency noise (more expensive and so done when we know for sure we are inside the cloud)
            float density = erodeCloudWithHighFrequency(baseDensity, ray.direction, skewedSamplePoint, relativeHeight);
			accumDensity += density;

			// Do Lighting calculations with cone sampling
			float densityAlongLight = 0.0;
			int light_samples = 6;

			for(int i=0; i<light_samples; i++)
			{
				// Add the current step offset to the sample position
                vec3 lightPos = pos + (stepSize * noise_kernel[i] * float(i));

               	vec3 sampleLightPos =  getRelativePositionInAtmosphere(lightPos, earthCenter);

                float currLightDensity = sampleLowFrequency(sampleLightPos, relativeHeight, earthCenter)*0.2;
                //Add back high frequency later

                // BUG: CURRLIGHTDENSITY IS ALWAYS NEGATIVE
                if(currLightDensity > 0.0)
                {
                	densityAlongLight += currLightDensity;// * 0.25; //if using sampleLightPos
                }
			}

			float attenuation_factor = 0.25;
            float influence_factor = 0.7;
            float beersLaw = BeerLambertModified(densityAlongLight, attenuation_factor, influence_factor);

            // Eventually use GetLightEnergy(height_fraction, densityAlongLight, ...) for second param
            transmittance = mix(transmittance, HG_light * beersLaw, (1.0 - accumDensity));

            colorPerSample = vec3(transmittance * 0.05);
            returnColor += colorPerSample;
		} //end if

		if(accumDensity >= 1.0) 
		{
            accumDensity = 1.0;
            break;
        } //end if

	} //end raymarcher for loop
	return vec3(baseDensity);//returnColor
}// end raymarch function

void main() 
{
    ivec2 dim = imageSize(currentFrameResultImage);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

	// Cast a ray
	uv.y = 1.0 - uv.y; //cause vulkan inverts y compared to openGL
	vec3 eyePos = -camera.eye.xyz;
	Ray ray = castRay(uv, eyePos);

    // Get sky background color from Preetham Sun/Sky Model
    vec3 backgroundCol = getAtmosphereColorPhysical(ray.direction, SUN_LOCATION - ray.origin); //day time
    // vec3 backgroundCol = getAtmosphereColorPhysical(ray.direction, BACKGROUND_SKY_SUN_LOCATION - ray.origin); //sunset

	if (dot( vec3(0, 1, 0), ray.direction ) < 0.0 )
	{
		//kill threads because we shouldnt see clouds below the horizon
		imageStore( godRaysCreationDataImage, ivec2(gl_GlobalInvocationID.xy), vec4(BLACK, 1.0) );
		imageStore( currentFrameResultImage, ivec2(gl_GlobalInvocationID.xy), vec4(RED, 1.0) );
		return;
	}

	// Find the start and end points of the ray march
	vec3 earthCenter = eyePos;
	earthCenter.y = -EARTH_RADIUS; //move earth below camera
	Intersection atmosphereInnerIsect = raySphereIntersection(ray.origin, ray.direction, earthCenter, ATMOSPHERE_RADIUS_INNER);
	Intersection atmosphereOuterIsect = raySphereIntersection(ray.origin, ray.direction, earthCenter, ATMOSPHERE_RADIUS_OUTER);

	// Ray March
	float transmittance = 1.0;
    float accumDensity = 0.0;
	vec3 rayMarchResult = rayMarch(ray, earthCenter, atmosphereInnerIsect.point, atmosphereInnerIsect.t, atmosphereOuterIsect.t, accumDensity, transmittance);

	// Blend and fade out clouds into the horizon
    accumDensity *= smoothstep(0.0, 1.0, min(1.0, remap(ray.direction.y, 0.0, 0.015, 0.0, 1.0)));

    //vec4 finalColor = vec4(mix(backgroundCol, vec3(clamp(transmittance, 0.0, 1.0)), accumDensity), 1.0);
    
    vec4 finalColor = vec4(vec3(accumDensity),1.0);
// vec4 finalColor = vec4(vec3(rayMarchResult),1.0);

    //godrays
    float lightIntensity = length(backgroundCol)/length(WHITE);
    vec4 greyScaleColor = lightColor;
    greyScaleColor.a = mix(0.0, lightIntensity, 1.0-accumDensity);

// Begin debug renders
#if HEIGHT_GRADIENT
    vec3 weather_data = texture(weatherMapSampler, uv).rgb;
	float densityHeightGradient = getDensityHeightGradientForPoint( vec3(uv, 1.0), weather_data );
	finalColor = vec4(densityHeightGradient);
#elif TEXTURE_LOW_FREQ
	vec4 lowFrequencyNoises = texture( cloudBaseShapeSampler, vec3(uv, sin(time.y)) );
	finalColor = vec4(lowFrequencyNoises);
#elif TEXTURE_HIGH_FREQ
	vec4 highFrequencyNoises = texture( cloudDetailsHighFreqSampler, vec3(uv, sin(time.y)) );
	finalColor = vec4(highFrequencyNoises);
#elif TEXTURE_CURL_NOISE
	vec4 curlNoise = texture( curlNoiseSampler, uv );
	finalColor = vec4(curlNoise);
#elif CLOUD_DENSITY
	finalColor = vec4( vec3(accumDensity), 1.0 );
#elif LIGHTING
	finalColor = vec4(vec3(hg_light), 1.0);
#elif BACKGROUND_SKY
	finalColor = vec4(backgroundCol, 1.0);
#endif
	
	//Pass the color off to the cloud pipeline's frag shader
	imageStore( godRaysCreationDataImage, ivec2(gl_GlobalInvocationID.xy), greyScaleColor );
    imageStore( currentFrameResultImage, ivec2(gl_GlobalInvocationID.xy), finalColor );
}