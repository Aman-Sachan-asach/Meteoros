// Ray March Reference: https://www.shadertoy.com/view/4sjfzw

#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 32, local_size_y = 32) in;
layout (set = 0, binding = 0, rgba8) uniform writeonly image2D resultImage;

layout (set = 0, binding = 1) uniform sampler3D cloudBaseShapeSampler;

layout (set = 0, binding = 2) uniform time 
{
    float deltaTime;
    float totalTime;
};

layout (set = 1, binding = 0) uniform CameraUBO
{
	mat4 view;
	mat4 proj;
	vec3 eye;
	float tanFovVby2;
	float tanFovHby2;
} camera;

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Intersection {
    vec3 normal;
    vec3 point;
    bool valid;
    float t;
};

//Global Defines
#define earthRadius 63710.0 // earth's actual radius in km = 6371
#define atmosphereRadiusInner earthRadius + 15000.0 //15000 meters above
#define atmosphereRadiusOuter earthRadius + 35000.0 //35000 meters above

#define LightVec normalize(vec3(1,1,1));

#define PI 3.14159265
#define InvPI 0.31830988618
#define THREE_OVER_SIXTEEN_PI 0.05968310365946075
#define ONE_OVER_FOUR_PI 0.07957747154594767

#define E 2.718281828459
#define EPSILON 0.0001

#define NUM_FBM_OCTAVES 2

//Global Defines for Debug Views
#define LIGTHING false
#define BLOBBY_CLOUDS true
#define DENSITY false
#define HEIGHT_GRADIENT false
#define TEXTURE false

// Maps values from one range to another
float remap(float value, float original_min, float original_max, float new_min, float new_max)
{
	return new_min + ( ((value-original_min) / (original_max - original_min)) * (new_max - new_min) );
}

//--------------------------------------------------------
//--------------------------------------------------------
//--------------------------------------------------------
// Procedural noise function for Fractal Brownian Motion taken from here: https://thebookofshaders.com/13/ and 
// Joe Klinger --> https://github.com/klingerj & https://www.shadertoy.com/user/jgkling
float noise(in vec2 p) { 
    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453123);
}

float interpolateNoise(in vec2 p) {
    vec2 p_floor = floor(p);
    vec2 p_fract = p - p_floor;

    // Sample the noise function at grid intervals
    vec2 offset = vec2(0.0, 1.0);
    float noise00 = noise(p_floor);
    float noise01 = noise(p_floor + offset);
    float noise10 = noise(p_floor + offset.yx);
    float noise11 = noise(p_floor + offset.yy);

    // Bilinearly interpolate
    float noise_x1 = mix(noise00, noise10, p_fract.x);
    float noise_x2 = mix(noise01, noise11, p_fract.x);

    return mix(noise_x1, noise_x2, p_fract.y);
}

float FBM(in vec2 p) {
    float amplitude = 0.75;
    float frequency = 1.0;
    const float persistence = 0.5;
    float maxVal = 0.0;
    float accumNoise = 0.0;

    for(int i = 0; i < NUM_FBM_OCTAVES; ++i) {
        accumNoise += interpolateNoise(p * frequency) * amplitude;
        maxVal += amplitude;
        amplitude *= persistence;
        frequency *= 2.0;
    }

    float noiseVal = accumNoise / maxVal;
    noiseVal *= step(0.5, noiseVal);
    return max(0.0, remap(noiseVal, 0.5, 1.0, 0.0, 0.9));
}
//--------------------------------------------------------
//--------------------------------------------------------
//--------------------------------------------------------

//Compute Ray for ray marching based on screenspace point
Ray castRay( vec2 screenPoint, vec3 _eye )
{
	Ray r;

    // Extract camera information from uniform
    vec3 camRight = -normalize(vec3(camera.view[0][0], 
				    	camera.view[1][0], 
				    	camera.view[2][0]));
    vec3 camUp =    -normalize(vec3(camera.view[0][1], 
				    	camera.view[1][1], 
				    	camera.view[2][1]));
    vec3 camLook =  normalize(vec3(camera.view[0][2], 
				    	camera.view[1][2], 
				    	camera.view[2][2]));

    // ScreenPoint is in NDC space

    //convert to camera space
    vec3 cam_x = screenPoint.x * camera.tanFovHby2 * camRight;
    vec3 cam_y = screenPoint.y * camera.tanFovVby2 * camUp;
    vec3 p = _eye + camLook + cam_x + cam_y; //facing the screen

    r.origin = _eye;
    r.direction = normalize(p - _eye);

    return r;
}

// sphere Intersection
Intersection raySphereIntersection(in vec3 rO, in vec3 rD, in float sphereRadius)
{
    //Transform the ray
    Intersection isect;
    isect.valid = false;
    isect.point = vec3(0);
    isect.normal = vec3(0, 1, 0);

    //ray doesn't have to be transformed into local space of the sphere because all calculations are happening in world space

    float A = pow(rD.x, 2.0) + pow(rD.y, 2.0) + pow(rD.z, 2.0);
    float B = 2.0*(rD.x*rO.x + rD.y*rO.y + rD.z*rO.z);
    float C = pow(rO.x, 2.0) + pow(rO.y, 2.0) + pow(rO.z, 2.0) - sphereRadius;
    float discriminant = B*B - 4*A*C;

    //If the discriminant is negative, then there is no real root
    if(discriminant < 0)
    {
        return isect;
    }

    float t = (-B - sqrt(discriminant))/(2.0*A);
    
    if(t < 0) 
    {
        t = (-B + sqrt(discriminant))/(2.0*A);
    }

    if(t >= 0)
    {
        vec3 p = vec3(rO + t*rD);
        isect.valid = true;

        isect.normal = normalize(p);
        isect.point = p;
        isect.t = length(p-rO);
    }

    return isect;
}



float getHeightFractionForPoint(vec3 inPos, vec2 inCloudMinMax)
{
	float height_fraction = (inPos.z - inCloudMinMax.x) / (inCloudMinMax.y - inCloudMinMax.x);
	return clamp(height_fraction, 0.0, 1.0);
}

float getDensityHeightGradientForPoint(vec3 point, vec3 weather_data)
{
	//Refer: 2017 pdf of slides 29/108
	//CloudTypes --> stratus = 1; stratocumulus = 2; cumulus = 3;
	float stratus = remap(point.y, 0, 0.1, 0.0, 1.0) * remap(point.y, 0.2, 0.3, 1.0, 0.0);
	float cumulus = remap(point.y, 0.01, 0.3, 0.0, 1.0) * remap(point.y, 0.3, 0.45, 1.0, 0.0);
	float cumulonimbus = remap(point.y, 0.0, 0.25, 0.0, 1.0) * remap(point.y, 0.6, 0.95, 1.0, 0.0);

	return clamp(cumulus, 0.0, 1.0); //TODO: should return a blended and weighted value
}

float sampleCloudDensity(vec3 point, vec3 weather_data)
{
	vec3 p = vec3(point.x, point.z, point.y);
	//Read in the low-frequency Perlin-Worley noises and Worley noises
	vec4 lowFrequencyNoises = texture(cloudBaseShapeSampler, p);

	//Build an FBM out of the low-frequency Worley Noises that are used to add detail to the Low-frequency Perlin Worley noise
	float lowFrequencyFBM = (lowFrequencyNoises.g * 0.625) + 
							(lowFrequencyNoises.b * 0.25) + 
							(lowFrequencyNoises.a * 0.125);

	//Define the base cloud shape by dilating it with the low-frequency FBM
	float baseCloud = remap( lowFrequencyNoises.r, -(1.0 - lowFrequencyFBM), 1.0, 0.0, 1.0 );

	//Get the density-height gradient
	float densityHeightGradient = getDensityHeightGradientForPoint(p, weather_data);

	//Apply Height function to the base cloud shape
	//baseCloud *= densityHeightGradient;
	return baseCloud;
}

vec4 rayMarch(Ray ray, vec3 weather_data, vec3 startPos, vec3 endPos, float start_t, float end_t)
{
	float maxSteps = 64.0; //floor(mix(64, 128, 1.0 - ray.direction.y)); //maybe switch to a 52 - 84 range
	float stepSize = (end_t - start_t)/maxSteps;

    vec3 pos;
    float transmittance = 1.0;
    float accumDensity = 0.0;
    float density;

    for (float t = start_t; t < end_t; t+= stepSize)
	{
		pos = ray.origin + t * ray.direction;
		//pos /= 100.0;

		density = sampleCloudDensity(pos, weather_data);

		if(density > 0.0) // Useful to prevent lighting calculations for zero density points
		{
			accumDensity += density;
			t += stepSize;
			break;
		}

		if(accumDensity >=1.0)
		{
			break;
		}
	}

	return vec4(vec3(accumDensity), 1.0);
}

void main() 
{
    ivec2 dim = imageSize(resultImage);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

	// base_cloud = remap(low_freq_noise, high_freq_noise, 1.0, 0.0, 1.0);
	// cloud_with_coverage = remap(noise, cloud_coverage, 1.0, 0.0, 1.0);
	vec3 weather_data = vec3(1,1,1);
	vec3 backgroundCol = vec3(0,0,1);

	// Cast a ray
	uv.y = 1.0 - uv.y; //cause vulkan inverts y compared to openGL
	vec2 screenPoint = uv * 2.0 - 1.0; // Compute screen space point from UVs //x and y move from -1 to 1
	vec3 eyePos = -camera.eye;

	Ray ray = castRay(screenPoint, eyePos);

	// if (dot( vec3(0,1,0), ray.direction ) < 0.0 )
	// {
	// 	//kill threads because we shouldnt see stuff below the horizon
	// 	imageStore( resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(backgroundCol,1.0) );
	// 	return;
	// }

	// Find the start and en points of the ray march
	vec3 earthCenter = eyePos;
	earthCenter.y = -earthRadius; //move earth below camera
	Intersection atmospherInnerIsect = raySphereIntersection(ray.origin, ray.direction, atmosphereRadiusInner);
	Intersection atmospherOuterIsect = raySphereIntersection(ray.origin, ray.direction, atmosphereRadiusOuter);
	//Intersection sphere = raySphereIntersection(ray.origin, ray.direction, 2.0); // To test ray marching with

	// Ray March
	vec4 finalColor = rayMarch(ray, weather_data, 
							atmospherInnerIsect.point, atmospherOuterIsect.point, 
							atmospherInnerIsect.t, atmospherOuterIsect.t);

	//Pass the color off to the cloud pipeline's frag shader
    imageStore( resultImage, ivec2(gl_GlobalInvocationID.xy), finalColor );
}